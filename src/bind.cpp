// AUTOGENERATED â€” DO NOT EDIT

#include "bind.h"
#include "treerat.h"
#include <sqrat.h>
#include "entity.h"
#include "map.h"
#include "methods.h"
#include "statedata.h"
#include "states.h"

void registerBinding(CTreeRat & rat)
{
    HSQUIRRELVM vm = rat.vm();

    // === CStates Class ===
    auto classCStates = Sqrat::Class<CStates>(vm, "CStates")
        .Ctor<>()
        .Func("setU", &CStates::setU)
        .Func("setS", &CStates::setS)
        .Func("getU", &CStates::getU)
        .Func("getS", &CStates::getS)
        .Func("hasU", &CStates::hasU)
        .Func("hasS", &CStates::hasS)
        .Func("clear", &CStates::clear);
    Sqrat::RootTable(vm).Bind("CStates", classCStates);

    // === CMap Class ===
    auto classCMap = Sqrat::Class<CMap>(vm, "CMap")
        .Ctor<>()
        .Func("at", &CMap::at)
        .Func("set", &CMap::set)
        .Func("clear", &CMap::clear)
        .Func("len", &CMap::len)
        .Func("hei", &CMap::hei)
        .Func("resize", &CMap::resize)
        .Func("findFirst", &CMap::findFirst)
        .Func("count", &CMap::count)
        .Func("fill", &CMap::fill)
        .Func("getAttr", &CMap::getAttr)
        .Func("setAttr", &CMap::setAttr)
        .Func("size", &CMap::size)
        .Func("lastError", &CMap::lastError)
        .Func("title", &CMap::title)
        .Func("setTitle", &CMap::setTitle)
        .Func("replaceTile", &CMap::replaceTile)
        .Func("statesConst", &CMap::statesConst)
        .StaticFunc("toKey", static_cast<uint16_t (*)(uint8_t, uint8_t)>(&CMap::toKey))
        .StaticFunc("toKeyPos", static_cast<uint16_t (*)(const Pos&)>(&CMap::toKey))
        .StaticFunc("toPos", &CMap::toPos)
        .Func("isValid", &CMap::isValid)
        .Func("shift", &CMap::shift)
        .Func("debug", &CMap::debug);
    Sqrat::RootTable(vm).Bind("CMap", classCMap);

    // === Entity Class ===
    auto classEntity = Sqrat::Class<Entity>(vm, "Entity")
        .Ctor<>()
        .Func("Move", &Entity::Move)
        .Func("moveDir", &Entity::MoveDir)
        .Func("Damage", &Entity::Damage)
        .Func("GetHealth", &Entity::GetHealth)
        .StaticFunc("getMaxHealth", &Entity::getMaxHealth)
        .ConstVar("name", &Entity::name)
        .Var("X", &Entity::x)
        .Var("y", &Entity::y)
        .Var("health", &Entity::health)
        .Prop("Speed", &Entity::GetSpeed, &Entity::SetSpeed)
        .StaticVar("MAX_HEALTH", &Entity::MAX_HEALTH);
    Sqrat::RootTable(vm).Bind("Entity", classEntity);

    // === StateValue Enum ===
    auto enumStateValue = Sqrat::ConstTable(vm)
        .Const("TIMEOUT", ::StateValue::TIMEOUT)
        .Const("POS_ORIGIN", ::StateValue::POS_ORIGIN)
        .Const("POS_EXIT", ::StateValue::POS_EXIT)
        .Const("MAP_GOAL", ::StateValue::MAP_GOAL)
        .Const("PAR_TIME", ::StateValue::PAR_TIME)
        .Const("YEAR", ::StateValue::YEAR)
        .Const("PRIVATE", ::StateValue::PRIVATE)
        .Const("USERDEF1", ::StateValue::USERDEF1)
        .Const("USERDEF2", ::StateValue::USERDEF2)
        .Const("USERDEF3", ::StateValue::USERDEF3)
        .Const("USERDEF4", ::StateValue::USERDEF4)
        .Const("AUTHOR", ::StateValue::AUTHOR)
        .Const("MSG0", ::StateValue::MSG0)
        .Const("MSG1", ::StateValue::MSG1)
        .Const("MSG2", ::StateValue::MSG2)
        .Const("MSG3", ::StateValue::MSG3)
        .Const("MSG4", ::StateValue::MSG4)
        .Const("MSG5", ::StateValue::MSG5)
        .Const("MSG6", ::StateValue::MSG6)
        .Const("MSG7", ::StateValue::MSG7)
        .Const("MSG8", ::StateValue::MSG8)
        .Const("MSG9", ::StateValue::MSG9)
        .Const("MSGA", ::StateValue::MSGA)
        .Const("MSGB", ::StateValue::MSGB)
        .Const("MSGC", ::StateValue::MSGC)
        .Const("MSGD", ::StateValue::MSGD)
        .Const("MSGE", ::StateValue::MSGE)
        .Const("MSGF", ::StateValue::MSGF);
    Sqrat::RootTable(vm).Bind("StateValue", enumStateValue);

    // === Direction Enum ===
    auto enumDirection = Sqrat::ConstTable(vm)
        .Const("UP", CMap::Direction::UP)
        .Const("DOWN", CMap::Direction::DOWN)
        .Const("LEFT", CMap::Direction::LEFT)
        .Const("RIGHT", CMap::Direction::RIGHT)
        .Const("MAX", CMap::Direction::MAX)
        .Const("NOT_FOUND", CMap::Direction::NOT_FOUND);
    Sqrat::RootTable(vm).Bind("Direction", enumDirection);

    // === Pos Struct ===
    auto structPos = Sqrat::Class<Pos>(vm, "Pos")
        .Ctor<int16_t, int16_t>()
        .Var("x", &::Pos::x)
        .Var("y", &::Pos::y);
    Sqrat::RootTable(vm).Bind("Pos", structPos);
}

void registerGlobal(CTreeRat & rat)
{
    rat.registerFn("printHello", print_hello);
    rat.registerFn("greet", greet);
    rat.registerFn("addNumbers", add_numbers);
}